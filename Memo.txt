SELECT *
FROM tabla t 
JOIN otra_tabla ot
WHERE condicion
GROUP BY t.columna 
HAVING condicion
ORDER BY t.columna DESC 
___________________________________________________________________________________________________________________________________________________
UNION 
select...
DELETE FROM
WHERE valor > ALL (lista)
WHERE valor > ANY (lista)
WHERE valor > SOME(lista)

___________________________________________________________________________________________________________________________________________________

UPDATE
SET
WHERE id = (SELECT id FROM...)

SELECT * 
FROM products P 
WHERE NOT EXISTS (
	SELECT *
    FROM order_items 
    WHERE product_id = p.product_id -- condicion
)
___________________________________________________________________________________________________________________________________________________
'subquery en select
SELECT 
	client_id,
    name,
    (SELECT SUM(invoice_total)
		FROM invoices
        WHERE client_id = c.client_id) AS total_sales,
	(SELECT AVG(invoice_total) 
		FROM invoices) AS average,
	(SELECT total_sales) - (SELECT average) AS difference
FROM clients c

CREATE VIEW nombre_view AS 
SELECT ...

___________________________________________________________________________________________________________________________________________________

DROP PROCEDURE IF EXISTS get_clients;

DELIMITER $$
CREATE PROCEDURE get_clients()
BEGIN
	SELECT * FROM clients;
END$$
DELIMITER ;

___________________________________________________________________________________________________________________________________________________

USE sql_invoicing;

DROP PROCEDURE IF EXISTS get_unpaid_invoices_for_client;

DELIMITER $$
CREATE PROCEDURE get_unpaid_invoices_for_client
(
	client_id INT,
    OUT invoices_count INT,
    OUT invoices_total DECIMAL(9, 2)
)
BEGIN
	SELECT COUNT(*), SUM(invoice_total)
    INTO invoices_count, invoices_total
    FROM invoices i
    WHERE i.client_id = client_id 
		AND payment_total = 0;
END $$
DELIMITER ;

set @invoices_count = 0;
set @invoices_total = 0;
call sql_invoicing.get_unpaid_invoices_for_client(1, @invoices_count, @invoices_total);
select @invoices_count, @invoices_total;

___________________________________________________________________________________________________________________________________________________

VARIABLES
DECLARE risk_factor DECIMAL(9, 2) DEFAULT 0;
___________________________________________________________________________________________________________________________________________________
DELIMITER $$
CREATE FUNCTION get_risk_factor_for_client
(
	client_id INT
)

RETURNS DECIMAL(9, 2)

READS SQL DATA
MODIFIES SQL DATA

BEGIN 
	DECLARE risk_factor DECIMAL(9, 2) DEFAULT 0;
	DECLARE invoices_total DECIMAL(9, 2);
	DECLARE invoices_count INT;
	
	SELECT COUNT(*), SUM(invoice_total)
	INTO invoices_count, invoices_total
	FROM invoices i
	WHERE i.client_id = client_id;
	
	SET risk_factor  = invoices_total / invoices_count;
	

	RETURN IFNULL(risk_factor, 0);

END $$
DELIMITER ;
___________________________________________________________________________________________________________________________________________________


___________________________________________________________________________________________________________________________________________________

DROP TRIGGER IF EXISTS payments_after_delete;

DELIMITER $$
CREATE TRIGGER payments_after_delete
	AFTER DELETE ON payments
	FOR EACH ROW
BEGIN
	UPDATE invoices
    SET payment_total = payment_total - OLD.amount
    WHERE invoice_id = OLD.invoice_id;
END $$
DELIMITER ;
___________________________________________________________________________________________________________________________________________________

SHOW TRIGGERS LIKE "payments$"
___________________________________________________________________________________________________________________________________________________
DROP EVENT IF EXISTS yearly_delete_stale_audit_rows;

DELIMITER $$
CREATE EVENT yearly_delete_stale_audit_rows
ON SCHEDULE 
	-- AT '2020-12-12' -- para ejecutarlo 1 vez
    EVERY 1 YEAR STARTS '2020-01-01' ENDS '2030-01-01'
DO BEGIN
	DELETE FROM payments_audit 
    WHERE action_date < NOW() - INTERVAL 1 YEAR;
END $$

DELIMITER ;

___________________________________________________________________________________________________________________________________________________
Transacciones

USE sql_store;

START TRANSACTION;

INSERT INTO orders(customer_id, order_date, status)
VALUES (1, "2020-01-01", 1);

INSERT INTO order_items
VALUES (LAST_INSERT_ID(), 1, 1, 1);

ROLLBACK; -- PARA DESHACER LOS CAMBIOS MANUALMENTE


COMMIT;

___________________________________________________________________________________________________________________________________________________
Isolation levels (concurrency)

SHOW VARIABLES LIKE 'transaction_isolation';

SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;

___________________________________________________________________________________________________________________________________________________





___________________________________________________________________________________________________________________________________________________




___________________________________________________________________________________________________________________________________________________


